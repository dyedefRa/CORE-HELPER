Önemli yerler:
1)Register.cshtml de ki form inputlarında,
		  string deger için  =>       <input class="form-control" asp-for="UserName">
		  boold deger icin =>         <input asp-for="TermsAccepted">
yani tipe bakmadan asp-for dedigin an , arka taraftaki tipi algılayıp ona göre bir input text yada input chech vs gibi degerlere burunuyor.

2)
        <input type="text" asp-format="{0:d}" class="form-control" asp-for="BirthDate">
asp-format' a odaklan sadece..

--------------------------------------VALIDATION--------------------------------------
Validation Model Binding yardımıyla "ModelStateDictionary" ile kontrol ediliyor
Bu özelliğin 3 önemli aksiyonu var
1- AddModelError(property,message)
2- GetValidationState(proporty) 
3- IsValid

Home>Register metedonda bunları kullandık.
Eğer bir input validasyonu sorunluya   input-validation-error sınıfı o inputa eklenıyor..
Bu durumu bootstrap ile kullabiliriz.   (Register.cshtmlde var)
	$('input.input-validation-error')
				  .closest('form-group')
				  .addClass('has-danger');

ModelState.AddModelError ile belirlediğimiz hata mesajları ve propertileri yansıtmak için
bir TagHelper kullanacağız;
    <div class="text-danger" asp-validation-summary="All"></div>
	
-asp-validation-summary="All"  TagHelperi ile toplu bir şekilde ekledğimiz hata mesajları çıkıyor

EK OLARAK ;
Register.cs sınıfındaki nullable olmayan değerler için yani BirthDate ve Terms...(string olmayan değerler)
Bu değerler için otomatik olarak o inputa  'data-val-required'=data-val-required="The BirthDate field is required."
gibi bir sınıf ekleniyor eğer boş gönderilirse.Default olarak bu atanıyor.
Bunu değiştirebiliriz.
Startup>Configuration =>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	  services.AddMvc().AddMvcOptions(opt =>
                opt.ModelBindingMessageProvider.SetValueMustNotBeNullAccessor(msg => "Lütfen bir değer giriniz"));

------------------------------------------
Property level işlemi yani , hata hangi inputtaysa onun yanında hata belirsin.Üstte toplu olarak çıkmasın (asp-validation-summary="All" yaptığımızda çıkan hataları propery seviyesin getirelim)
Bunun için ;
            <span class="text-danger" asp-validation-for="Email"></span>
eklemek yeterli


META DATA ILE VALIATION YANI DATAANNOTIANS ILE BU ISLEMLERI YAPALIM BUNUN ICIN REGISTER2.cs ve REgister2.cshtml  oluşturduk.
Aynı olayı buradan daha basit bir şekilde yapabiliyioruz.
cshtml yani view tafında ypılanlar aynı .
İlk olayda Controller tarafında ModelState.AddModelError ile hataları ekleyip view tarafına yansıtıyorduk
2 olayda Register2.cs sınıfında DataAnnotite ile  daha basit bir şekilde yapıyoruz.
ONEMLI OLAN asp-validation-for u ikisi için de view tarafında kullanıyor olmamız



